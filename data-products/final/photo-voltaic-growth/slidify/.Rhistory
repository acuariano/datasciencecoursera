testing <- testing[,c(selectedColumns[-53], problem_id=TRUE)]
names(selectedColumns[-53])
testing[,names(selectedColumns[-53])]
testing <- testing[,c(names(selectedColumns[-53]), "problem_id")]
selectedColumns
training <- read.csv('pml-training.csv', na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv('pml-testing.csv', na.strings = c("NA", "", "#DIV/0!"))
selectedColumns = colSums(is.na(training))<19216
training <- training[,selectedColumns]
training <- training[,-c(1:7)]
c(names(training), "problem_id")
c(names(training[,-53]), "problem_id")
testing <- testing[, c(names(training[,-53]), "problem_id")]
predictionsRFTesting <- predict(modRF, testing)
predictionsRFTesting
data.table(predictionsRFTesting)
library(data.table)
data.table(predictionsRFTesting)
library(parallel)
system.time(modRFParallel <- train(classe ~ ., method="rf", data=trainingSub))
library(caret)
system.time(modRFParallel <- train(classe ~ ., method="rf", data=trainingSub))
varImp(modRF)
names(varImp(modRF))
row.names(varImp(modRF))
str(varImp(modRF))
varImp(modRF)$model
varImp(modRF)$varImp
varImp(modRF)$importance
row.names(varImp(modRF)$importance)
sort(varImp(modRF)$importance)
sort(varImp(modRF)$importance$overall)
order(varImp(modRF)$importance$overall)
order(varImp(modRF)$importance)
importanceRF <- varImp(modRF)$importance
importanceRF[order(importanceRF)]
order(importanceRF)
importanceRF[order(importanceRF),]
importanceRF[order(importanceRF, decreasing = TRUE),]
importanceRF
row.names(importanceRF[importanceRF$Overall>10,]
;
row.names(importanceRF[importanceRF$Overall>10,])
importanceRF[importanceRF$Overall>10,]
importanceRF[importanceRF$Overall>10,]$overall
ImpMeasure<-data.frame(varImp(modelFit)$importance)
ImpMeasure$Vars<-row.names(ImpMeasure)
ImpMeasure[order(-ImpMeasure$Overall),][1:3,]
ImpMeasure<-data.frame(varImp(modRF)$importance)
ImpMeasure$Vars<-row.names(ImpMeasure)
ImpMeasure[order(-ImpMeasure$Overall),][1:3,]
ImpMeasure<-data.frame(varImp(modRF)$importance)
ImpMeasure$Vars<-row.names(ImpMeasure)
ImpMeasure[order(-ImpMeasure$Overall),][1:10,]
ImpMeasure<-data.frame(varImp(modRF)$importance)
ImpMeasure$Vars<-row.names(ImpMeasure)
ImpMeasure[order(-ImpMeasure$Overall),][1:20,]
ImpMeasure<-data.frame(varImp(modRF)$importance)
ImpMeasure$Vars<-row.names(ImpMeasure)
ImpMeasure[order(-ImpMeasure$Overall),][1:20,]
ImpMeasure[order(-ImpMeasure$Overall),][1:20,]
row.names(ImpMeasure[order(-ImpMeasure$Overall),][1:20,])
importantVariablesNames <- row.names(ImpMeasure[order(-ImpMeasure$Overall),][1:20,])
training20MostImportant <- training[, importantVariablesNames]
system.time(modRFOnly20MostImportant <- train(classe ~ ., method="rf", data=training20MostImportant))
importantVariablesNames <- c(importantVariablesNames, "classe")
training20MostImportant <- training[, importantVariablesNames]
system.time(modRFOnly20MostImportant <- train(classe ~ ., method="rf", data=training20MostImportant))
predictionsRFOnly20MostImportant <- predict(modRFOnly20MostImportant, cvSub)
confusionMatrix(predictionsRFOnly20MostImportant, cvSUb$classe)
confusionMatrix(predictionsRFOnly20MostImportant, cvSub$classe)
row.names(ImpMeasure[order(-ImpMeasure$Overall),][1:10,])
importantVariablesNames10 <- row.names(ImpMeasure[order(-ImpMeasure$Overall),][1:10,])
importantVariablesNames10 <- c(importantVariablesNames10, "classe")
training10MostImportant <- training[, importantVariablesNames10]
system.time(modRFOnly10MostImportant <- train(classe ~ ., method="rf", data=training10MostImportant))
training10MostImportant <- trainingSub[, importantVariablesNames10]
system.time(modRFOnly10MostImportant <- train(classe ~ ., method="rf", data=training10MostImportant))
predictionsRFOnly10MostImportant <- predict(modRFOnly10MostImportant, cvSub)
confusionMatrix(predictionsRFOnly10MostImportant, cvSub$classe)
trainingOri <- read.csv('pml-training.csv', na.strings = c("NA", "", "#DIV/0!"))
names(trainingOri)
nsv
nsv[,,,TRUE]
nsv[,,,TRUE]
nearZeroVar(training)
nearZeroVar(training)
ImpMeasure<-data.frame(varImp(modRF)$importance)
ImpMeasure$Vars<-row.names(ImpMeasure)
importantVariablesNames10 <- row.names(ImpMeasure[order(-ImpMeasure$Overall),][1:10,])
importantVariablesNames10 <- c(importantVariablesNames10, "classe") # add 'classe' again for training
training10MostImportant <- trainingSub[, importantVariablesNames10] # select columns of trainingSub set
modRF10 <- train(classe ~ ., method="rf", data=training10MostImportant)  # 811 seconds using top 10
predRF10 <- predict(modRF, cvSub)
confusionMatrix(predRF10, cvSub$classe)
predict(modRF10, testing)
predict(modRF10, testing) != predict(modRF, testing)
table(predict(modRF10, testing) != predict(modRF, testing))
table(colSums(is.na(training)))
table(colSums(is.na(trainingOri)))
cmTree <- confusionMatrix(predTree, cvSub$classe)
cmRF <- confusionMatrix(predRF, cvSub$classe)
cmGBM <- confusionMatrix(predGBM, cvSub$classe)
cmLDA <- confusionMatrix(predLDA, cvSub$classe)
list(Tree = cmTree$overall['Accuracy'], RandomForest = cmRF$overall['Accuracy'], GBM = cmGBM$overall['Accuracy'], LDA = cmLDA$overall['Accuracy'])
cmTree$overall
cmTree$overall['Accuracy'][0]
cmTree$overall['Accuracy']
cmTree$overall[0]
cmTree$overall['Accuracy'][1]
cmTree$overall['Accuracy'][1][1]
str(cmTree$overall['Accuracy'])
cmTree$overall[['Accuracy']]
str(cmTree$overall[['Accuracy']])
list(Tree = cmTree$overall[['Accuracy']], RandomForest = cmRF$overall[['Accuracy']], GBM = cmGBM$overall[['Accuracy']], LDA = cmLDA$overall[['Accuracy']])
as.dataframe(list(Tree = cmTree$overall[['Accuracy']], RandomForest = cmRF$overall[['Accuracy']], GBM = cmGBM$overall[['Accuracy']], LDA = cmLDA$overall[['Accuracy']]))
data.frame(list(Tree = cmTree$overall[['Accuracy']], RandomForest = cmRF$overall[['Accuracy']], GBM = cmGBM$overall[['Accuracy']], LDA = cmLDA$overall[['Accuracy']]))
cmRF <- confusionMatrix(predRF10, cvSub$classe)
accuracies$RF10 <- cmRF$overall[['Accuracy']]
accuracies <- data.frame(list(Tree = cmTree$overall[['Accuracy']], RandomForest = cmRF$overall[['Accuracy']], GBM = cmGBM$overall[['Accuracy']], LDA = cmLDA$overall[['Accuracy']]))
accuracies$RF10 <- cmRF$overall[['Accuracy']]
accuracies
modRF10time <- system.time(modRF10 <- train(classe ~ ., method="rf", data=training10MostImportant))
modRF10time
predict(modRF10, testing) != predict(modRF, testing)
predRF10 <- predict(modRF10, cvSub)
confusionMatrix(predRF10, cvSub$classe)
cmRF10 <- confusionMatrix(predRF10, cvSub$classe)
accuracies$RF10 <- cmRF10$overall[['Accuracy']]
accuracies
1-accuracies
predict(modRF, testing)
finalPred <- predict(modRF, testing)
names(finalPred) <- 1:20
finalPred
library(rattle)
fancyRpartPlot(modTree$finalModel)
library(rpart)
fancyRpartPlot(modTree$finalModel)
install.packages(rpart.plot)
install.packages("rpart.plot")
library(rpart)
fancyRpartPlot(modTree$finalModel)
library(rpart.plot)
fancyRpartPlot(modTree$finalModel)
print(modTree$finalModel)
table(predict(modTree, csSub))
table(predict(modTree, cvSub))
table(predict(modRF, cvSub))
nrow(trainingSub$classe == "D")
trainingSub$classe == "D"
table(trainingSub$classe)
hist(trainingSub$classe)
plot(trainingSub$classe)
rm(list=ls())
training <- read.csv('pml-training.csv', na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv('pml-testing.csv', na.strings = c("NA", "", "#DIV/0!"))
selectedColumns = colSums(is.na(training))<19216
training <- training[,selectedColumns]
training <- training[, -c(1:7)]
testing <- testing[, c(names(training[,-53]), "problem_id")]
#load libraries to use
library(caret)
library(randomForest)
#check for near zero variance features
nearZeroVar(training)
set.seed(19895)
# generate partitions for training and cross-validation
inTrain <- createDataPartition(training$classe, p = 0.6, list=FALSE)
trainingSub <- training[inTrain,]
cvSub <- training[-inTrain,]
table(trainingSub$classe)
modLDA <- train(classe ~ ., method="lda", data=trainingSub) #9 seconds
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
library(parallel)
library(doParallel)
install.packages("doParallel")
library(doParallel)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fitControl <- trainControl(method = "cv", number = 10, allowParallel = TRUE)
system.time(modRF <-  train(classe~., method="rf",data=trainingSub,trControl = fitControl))
# Stop parallel processing
stopCluster(cluster)
registerDoSEQ()
ImpMeasure<-data.frame(varImp(modRF)$importance)
ImpMeasure$Vars<-row.names(ImpMeasure)
importantVariablesNames10 <- row.names(ImpMeasure[order(-ImpMeasure$Overall),][1:10,])
importantVariablesNames10 <- c(importantVariablesNames10, "classe") # add 'classe' again for training
training10MostImportant <- trainingSub[, importantVariablesNames10] # select columns of trainingSub set
system.time(modRF10time <-  train(classe~., method="rf",data=training10MostImportant,trControl = fitControl))
training <- read.csv('pml-training.csv', na.strings = c("NA", "", "#DIV/0!"))
testing <- read.csv('pml-testing.csv', na.strings = c("NA", "", "#DIV/0!"))
set.seed(998)
selectedColumns = colSums(is.na(training))<19216
training <- training[,selectedColumns]
training <- training[, -c(1:7)]
testing <- testing[, c(names(training[,-53]), "problem_id")]
library(caret)
set.seed(998)
inTrain <- createDataPartition(training$classe, p = 0.6, list=FALSE)
trainingSub <- training[inTrain,]
cvSub <- training[-inTrain,]
fitControl <- trainControl(method="repeatedcv", number=10, repeats=3, returnData = TRUE)
registerDoMC(cores = 4)
set.seed(825)
install.packages("doMC")
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
system.time(modelGbm <- train(classe ~., data=training2, method="gbm", trControl=fitControl))
system.time(modelGbm <- train(classe ~., data=trainingSub, method="gbm", trControl=fitControl))
predict(modelGBM, cvSub)
predict(modelGbm, cvSub)
predGbm <- predict(modelGbm, cvSub)
confusionMatrix(predGbm, cvSub$classe)
fileName <- 'tesla-finder.html'
fileString <- readChar(fileName, file.info(fileName)$size)
jsonStr <- str_match(fileString, 'var location_data =\\s*(\\[\\{.+\\}\\]);\\s+var production = true;')[2]
library(stringr)
jsonStr <- str_match(fileString, 'var location_data =\\s*(\\[\\{.+\\}\\]);\\s+var production = true;')[2]
df <- fromJSON(jsonStr)
library(jsonlite)
df <- fromJSON(jsonStr)
library(plyr)
rename(df, c("lat"="latitude", "lng"="longitude"))
df <- rename(df, c("latitude"="lat", "longitude"="lng"))
library(leaflet)
teslaIcon <- makeIcon(
#        iconUrl = 'https://www.tesla.com/sites/all/themes/custom/tesla_theme/assets/img/icons/favicon-16x16.png',
iconUrl = 'https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-supercharger.png?20150604',
iconWidth = 16,
iconHeight = 16
)
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = paste(~title, "<br/>", ~address))
df <- df[c("lat", "lng", "title", "address")]
names(df)
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = paste(~title, "<br/>", ~address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = 'Marker')
locations <- read.csv('locations.txt')
locations %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = 'Marker')
str(locations)
str(df)
sapply(df, mode)
sapply(df, class)
transform(df, lat = as.numeric(lat), lng = as.numeric(lng))
df <- transform(df, lat = as.numeric(lat), lng = as.numeric(lng))
sapply(df, class)
sapply(df, mode)
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = paste(~title, "<br/>", ~address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = paste(title, "<br/>", address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = paste(~title, "<br/>", ~address))
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = paste(df$title, "<br/>", df$address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = paste(df$title, "<br/>", df$address))
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = paste("<h2>", df$title, "</h2>", df$address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcon, popup = paste("<h2>", df$title, "</h2>", df$address))
df <- fromJSON(jsonStr)
names(df)
str(df$location_type)
table(df$location_type)
table(df$destination_charger_logo)
str(df$destination_charger_logo)
head(df$common_name)
head(df$title)
names(df)
head(df$open_soon)
head(df$kiosk_pin_x
)
head(df$kiosk_zoom_pin_x)
head(df$amenities)
names(df)
head(df$chargers)
head(df$geocode)
head(df$path)
names(df)
head(df$location_type)
str(df$location_type)
iconURL <- function(type) {
if ("supercharger" %in% type)
return('https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-supercharger.png?20150604')
if ("standard charger" %in% type)
return('https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-charger.png?20150604')
if ("service" %in% type)
return('https://www.tesla.com/sites/all/themes/custom/tesla_theme/assets/img/icons/favicon-16x16.png')
return('https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-store.png?20150604')
}
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcons, popup = paste("<h2>", df$title, "</h2>", df$address))
teslaIcons <- icons(
iconUrl = iconURL(df$location_type),
iconWidth = 16,
iconHeight = 16
)
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcons, popup = paste("<h2>", df$title, "</h2>", df$address))
df <- transform(df, lat = as.numeric(latitude), lng = as.numeric(longitude))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcons, popup = paste("<h2>", df$title, "</h2>", df$address))
df <- transform(df, latitude = as.numeric(latitude), longitude = as.numeric(longitude))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcons, popup = paste("<h2>", df$title, "</h2>", df$address))
df <- fromJSON(jsonStr)
df <- transform(df, latitude = as.numeric(latitude), longitude = as.numeric(longitude))
df <- transform(df, lat = as.numeric(latitude), lng = as.numeric(longitude))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcons, popup = paste("<h2>", df$title, "</h2>", df$address))
names(df)
sapply(df, class)
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcons, popup = paste("<h2>", df$title, "</h2>", df$address))
df <- fromJSON(jsonStr)
df <- transform(df, lat = as.numeric(latitude), lng = as.numeric(longitude))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcons, popup = paste("<h2>", df$title, "</h2>", df$address))
df$lat
df <- fromJSON(jsonStr)
df <- transform(df, latitude = as.numeric(latitude), longitude = as.numeric(longitude))
df <- rename(df, c("latitude"="lat", "longitude"="lng"))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcons, popup = paste("<h2>", df$title, "</h2>", df$address))
teslaIcons <- icons(
iconUrl = ifelse("supercharger" %in% type,
'https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-supercharger.png?20150604',
ifelse("standard charger" %in% type,
'https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-charger.png?20150604',
ifelse("service" %in% type,
'https://www.tesla.com/sites/all/themes/custom/tesla_theme/assets/img/icons/favicon-16x16.png',
'https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-store.png?20150604')
)),
iconWidth = 16,
iconHeight = 16
)
teslaIcons <- icons(
iconUrl = ifelse("supercharger" %in% df$type,
'https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-supercharger.png?20150604',
ifelse("standard charger" %in% df$type,
'https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-charger.png?20150604',
ifelse("service" %in% df$type,
'https://www.tesla.com/sites/all/themes/custom/tesla_theme/assets/img/icons/favicon-16x16.png',
'https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-store.png?20150604')
)),
iconWidth = 16,
iconHeight = 16
)
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcons, popup = paste("<h2>", df$title, "</h2>", df$address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = teslaIcons, popup = paste("<h2>", df$title, "</h2>", df$address))
sapply(df$location_type, iconURL)
df$iconURL <- sapply(df$location_type, iconURL)
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = df$iconURL, popup = paste("<h2>", df$title, "</h2>", df$address))
df$iconAddress <- sapply(df$location_type, iconURL)
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = df$iconAddress, popup = paste("<h2>", df$title, "</h2>", df$address))
df$iconAddress
head(df$iconAddress)
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = df$iconAddress, popup = paste("<h2>", df$title, "</h2>", df$address))
?icons
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = makeIcon(iconURL = df$iconAddress, iconWidth = 16, iconHeight = 16), popup = paste("<h2>", df$title, "</h2>", df$address))
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = ~ icons( iconUrl = iconURL(type), iconWidth = 16, iconHeight = 16), popup = paste("<h2>", df$title, "</h2>", df$address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = ~ icons( iconUrl = iconURL(type), iconWidth = 16, iconHeight = 16), popup = paste("<h2>", df$title, "</h2>", df$address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = ~ icons( iconUrl = iconURL(location_type), iconWidth = 16, iconHeight = 16), popup = paste("<h2>", df$title, "</h2>", df$address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = ~ icons( iconUrl = iconAddress, iconWidth = 16, iconHeight = 16), popup = paste("<h2>", df$title, "</h2>", df$address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = ~ icons( iconUrl = iconURL(location_type), iconWidth = 16, iconHeight = 16), popup = paste("<h2>", df$title, "</h2>", df$address))
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = ~ icons( iconUrl = iconAddress, iconWidth = 16, iconHeight = 16), popup = paste("<h2>", df$title, "</h2>", df$address))
rm(list=ls())
iconURL <- function(type) {
if ("supercharger" %in% type)
return('https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-supercharger.png?20150604')
if ("standard charger" %in% type)
return('https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-charger.png?20150604')
if ("service" %in% type)
return('https://www.tesla.com/sites/all/themes/custom/tesla_theme/assets/img/icons/favicon-16x16.png')
return('https://www.tesla.com/sites/all/modules/custom/tesla_findus_map/assets/icon-store.png?20150604')
}
fileName <- 'tesla-finder.html'
fileString <- readChar(fileName, file.info(fileName)$size)
library(stringr)
jsonStr <- str_match(fileString, 'var location_data =\\s*(\\[\\{.+\\}\\]);\\s+var production = true;')[2]
library(jsonlite)
df <- fromJSON(jsonStr)
library(plyr)
df <- transform(df, latitude = as.numeric(latitude), longitude = as.numeric(longitude))
df <- rename(df, c("latitude"="lat", "longitude"="lng"))
df$iconAddress <- sapply(df$location_type, iconURL)
library(leaflet)
df %>% leaflet() %>% addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(maxClusterRadius=30, disableClusteringAtZoom=10), icon = ~ icons( iconUrl = iconAddress, iconWidth = 16, iconHeight = 16), popup = paste("<h2>", df$title, "</h2>", df$address))
rm(list = ls())
?leaflet
library(leaflet)
?leaflet
colSUms(mtcars)
?colSums
?show
?mean
?methods
?predict
?lm
getOption("defaultPackages")
?colSums
colSums(mtcars)
?show
?mean
?dgamma
?lm
?dgamma
?predict
class(show)
class(mean())
class(mean}
class(mean)
class(dgamma)
class(lm)
class(predict)
class(colSums)
show
mean
predict
dgamma
lm
predict
show
methods(show)
methods(lm)
methods(predict)
showMethods(lm)
methods(dgamma)
showMethods(dgamma)
methods(mean)
methods(colSums)
showMethods(colSums)
colSums
knitr::opts_chunk$set(echo = FALSE)
pvCapacity <- read.csv("pv_capacity.csv", encoding = "UTF-8")
library(plotly)
p <- plot_ly(pvCapacity, x = ~Year, y = ~Capacity, type = "scatter", mode="markers", color = ~Country, size=~Installed)
p <- plot_ly(pvCapacity, x = ~Year, y = ~Capacity, type = "scatter", mode="markers", color = ~Country, size=~Installed) %>%
layout(yaxis = list(type = "log", title="Capacity (MW)"))
p
```{r pvcapacity, warning=FALSE,echo=FALSE}
library(ggplot2)
g0 <- ggplot(pvCapacity, aes(Capacity, Year)) + geom_line() + geom_area(alpha=0.3)
g0 + stat_smooth(method="lm",formula=y~log(x),fill="red")
library(ggplot2)
g0 <- ggplot(pvCapacity, aes(Year, Capacity)) + geom_line() + geom_area(alpha=0.3)
g0 + stat_smooth(method="lm",formula=y~log(x),fill="red")
ggplot(pvCapacity) +
geom_jitter(aes(Capacity,Year, colour=Country),) + geom_smooth(aes(Capacity,Year, colour=Country), method=lm, se=FALSE)
ggplot(pvCapacity) +
geom_jitter(aes(Capacity,Year, colour=Country),) + geom_smooth(aes(Capacity,Year, colour=Country), method=lm, se=FALSE) + scale_y_log10()
ggplot(pvCapacity) +
geom_jitter(aes(Year,Capacity, colour=Country),) + geom_smooth(aes(Year,Capacity, colour=Country), method=lm, se=FALSE) + scale_y_log10()
ggplot(pvCapacity) +
geom_jitter(aes(Year,Capacity, colour=Country),) + scale_y_log10()
g <- ggplot(pvCapacity) +
geom_jitter(aes(Year,Capacity, colour=Country),) + scale_y_log10()
ggplotly(g)
g <- ggplot(pvCapacity) +
geom_jitter(aes(Year,Capacity, colour=Country),) + geom_smooth(aes(Year,Capacity, colour=Country), method=lm, se=FALSE) + scale_y_log10()
ggplotly(g)
p <- plot_ly(pvCapacity, x = ~Year, y = ~Capacity, type = "scatter", mode="markers", color = ~Country, size=~Installed) %>%
layout(yaxis = list(type = "log", title="Capacity (MW)"))
p
g <- ggplot(pvCapacity) +
geom_jitter(aes(Year,Capacity, colour=Country),) + geom_smooth(aes(Year,Capacity, colour=Country), method=lm, se=FALSE) + scale_y_log10()
ggplotly(g)
p <- plot_ly(pvCapacity, x = ~Year, y = ~Capacity, type = "scatter", mode="markers", color = ~Country, size=~Installed) %>%
layout(yaxis = list(type = "log", title="Capacity (MW)"))
p
shiny::runApp('C:/Users/acuariano/Dropbox/Coursera/Data Science Specialization/Data Products/final assignment/photo-voltaic-growth')
runApp('C:/Users/acuariano/Dropbox/Coursera/Data Science Specialization/Data Products/final assignment/photo-voltaic-growth')
shiny::runApp('C:/Users/acuariano/Dropbox/Coursera/Data Science Specialization/Data Products/final assignment/photo-voltaic-growth')
install.packages("shinyBS")
runApp('C:/Users/acuariano/Dropbox/Coursera/Data Science Specialization/Data Products/final assignment/photo-voltaic-growth')
library(slidify)
install.packages("slidify")
library(slidify)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages('yaml')
install.packages("yaml")
library(slidifyLibraries)
author("mydeck")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
library(slidify)
author("mydeck")
